#!/bin/bash
#////////////////////////////////////
# DietPi-Config Script
#
#////////////////////////////////////
# Created by Dan Knight / daniel_haze@hotmail.com / fuzon.co.uk
#
#////////////////////////////////////
#
# Info:
# - filename /boot/dietpi/dietpi-config
#////////////////////////////////////

#/////////////////////////////////////////////////////////////////////////////////////
#Obtain Hardware Details
#/////////////////////////////////////////////////////////////////////////////////////
HW_MODEL=$(sed -n 1p /boot/dietpi/.hw_model)
HW_MODEL_DESCRIPTION=$(sed -n 2p /boot/dietpi/.hw_model)
DISTRO=$(sed -n 3p /boot/dietpi/.hw_model)

HW_MSG_NOTSUPPORTED="Not Supported"
HW_OptionNotSupported(){

	WHIP_QUESTION="This option is not available for $HW_MODEL_DESCRIPTION"
	whiptail --title "$WHIP_TITLE" --msgbox "$WHIP_QUESTION" --backtitle "$WHIP_BACKTITLE" 8 55

}

#/////////////////////////////////////////////////////////////////////////////////////
#Obtain Install Stage Index
#/////////////////////////////////////////////////////////////////////////////////////
# see /boot/dietpi/boot for info
DIETPI_INSTALL_STAGE=$(cat /boot/dietpi/.install_stage)

#/////////////////////////////////////////////////////////////////////////////////////
# MENUS
#/////////////////////////////////////////////////////////////////////////////////////
WHIP_BACKTITLE='DietPi - Config'
WHIP_TITLE='DietPi - Config'
WHIP_QUESTION='DietPi - Config'
CHOICE=0
OPTION=0
REBOOT_REQUIRED=false
TARGETMENUID=0

#Interger min/max value holders
MIN_VALUE=0
MAX_VALUE=0

#TARGETMENUID=0
Menu_Main(){

    WHIP_TITLE='---------- DietPi-Config ----------'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Hardware : $HW_MODEL_DESCRIPTION" --cancel-button "Exit" --backtitle "$WHIP_BACKTITLE" 16 60 8 \
    "1" "Display Options" \
    "2" "Advanced Options" \
    "3" "Performance Options" \
    "4" "Language/Regional Options" \
    "5" "Security Options" \
    "6" "Networking Options" \
    "7" "AutoBoot Options" \
    "8" "Tools" 3>&1 1>&2 2>&3)

    CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
        if [ "$OPTION" = 1 ]; then
             TARGETMENUID=1
        elif [ "$OPTION" = 2 ]; then
             TARGETMENUID=3
        elif [ "$OPTION" = 3 ]; then
            TARGETMENUID=4
        elif [ "$OPTION" = 4 ]; then
            TARGETMENUID=7
        elif [ "$OPTION" = 5 ]; then
            TARGETMENUID=5
        elif [ "$OPTION" = 6 ]; then
            TARGETMENUID=8
        elif [ "$OPTION" = 7 ]; then
            /boot/dietpi/dietpi-boot_order
        elif [ "$OPTION" = 8 ]; then
            TARGETMENUID=11
       else
            Menu_Exit
        fi
    else
        Menu_Exit
    fi

}

Menu_Exit(){

    # TARGETMENUID = -1 , if we are to exit the menu

	# The good old "Are you really sure" question.
	WHIP_TITLE=' Exit DietPi-Config? '
    WHIP_QUESTION=' Exit DietPi-Config? '
    whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_BACKTITLE" 12 65
    CHOICE=$?
	
 	#Exit
    if [ "$CHOICE" = 0 ]; then
		TARGETMENUID=-1

		# Reboot Required
		if [ "$REBOOT_REQUIRED" = true ]; then
			WHIP_TITLE=' Changes Made - Reboot Required '
			WHIP_QUESTION=' A reboot is required to apply the new settings \n Would you like to reboot now? '
			whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_BACKTITLE" 15 65
			CHOICE=$?
			if [ "$CHOICE" = 0 ]; then
				#Reboot
				reboot
			fi
		fi
 	#Return to DietPiConfig
    else
		TARGETMENUID=0
	fi
}

#TARGETMENUID=1
Menu_DisplayOptions(){

 	TARGETMENUID=0
	
	#Get Current Settings
	local overscan_enabled=$(cat /boot/config.txt | grep -ci -m1 'disable_overscan=0')
	local overscan_text='Disabled'
	if [ "$overscan_enabled" = 1 ]; then
    	overscan_text='Enabled'
	fi
	
	local hdmi_boost_disabled=$(cat /boot/config.txt | grep -ci -m1 '#config_hdmi_boost=')
	local hdmi_boost_text='Enabled'
	if [ "$hdmi_boost_disabled" = 1 ]; then
    	hdmi_boost_text='Disabled'
	fi

	#Odroid C1
	if (( $HW_MODEL == 10 )); then
		hdmi_boost_text=$HW_MSG_NOTSUPPORTED
		overscan_text=$HW_MSG_NOTSUPPORTED
	fi
	
	WHIP_TITLE='---------- DietPi - Display Options ----------'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Make a Selection" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 15 60 4 \
    "1" "Change Resolution" \
    "2" "GPU/RAM Memory Split" \
    "3" "Overscan:   $overscan_text" \
    "4" "HDMI Boost: $hdmi_boost_text" 3>&1 1>&2 2>&3)

    CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
        if [ "$OPTION" = 1 ]; then
			TARGETMENUID=2
        elif [ "$OPTION" = 2 ]; then
			WHIP_QUESTION='GPU/RAM Memory splits are pre-configured and applied during DietPi-Software setup. \n \nThe split value is optimized based on your software installs, however, feel free to tweak them.'
			whiptail --title "$WHIP_TITLE" --msgbox "$WHIP_QUESTION" --backtitle "$WHIP_BACKTITLE" 12 60
			TARGETMENUID=6
    	elif [ "$OPTION" = 3 ]; then
			#Odroid C1
			if (( $HW_MODEL == 10 )); then
				HW_OptionNotSupported
		    #Enabled
			elif [ "$overscan_enabled" = 1 ]; then
				WHIP_QUESTION=" Current setting: $overscan_text \n Would you like to disable overscan? \n \n If you have black borders on your screen, select Disable."
				whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --yes-button "Disable" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 12 60
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
					sed -i '/disable_overscan=/c\disable_overscan=1' /boot/config.txt
					REBOOT_REQUIRED=true
				fi
			#Disabled
			elif [ "$overscan_enabled" = 0 ]; then
				WHIP_QUESTION=" Current setting: $overscan_text \n Would you like to enable overscan?"
				whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --yes-button "Enable" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 12 60
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
					sed -i '/disable_overscan=/c\disable_overscan=0' /boot/config.txt
					REBOOT_REQUIRED=true
				fi
			fi

			#Return to This Menu
			TARGETMENUID=1
    	elif [ "$OPTION" = 4 ]; then
			#Odroid C1
			if (( $HW_MODEL == 10 )); then
				HW_OptionNotSupported
		    #Enabled
			elif [ "$hdmi_boost_disabled" = 0 ]; then
				WHIP_QUESTION=" Current setting: $hdmi_boost_text \n Would you like to disable HDMI Signal Boost?"
				whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --yes-button "Disable" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 12 60
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
                    sed -i '/config_hdmi_boost=/c\#config_hdmi_boost=4' /boot/config.txt
					REBOOT_REQUIRED=true
				fi
			#Disabled
			elif [ "$hdmi_boost_disabled" = 1 ]; then
				WHIP_QUESTION=" Current setting: $hdmi_boost_text \n Would you like to enable HDMI Signal Boost? \n \n If you have no display output, or, blinking, selecting Enable may resolve it "
				whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --yes-button "Enable" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 12 60
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
                    sed -i '/config_hdmi_boost=/c\config_hdmi_boost=4' /boot/config.txt
					REBOOT_REQUIRED=true
				fi
			fi

			#Return to This Menu
			TARGETMENUID=1
        fi
	fi
}

#TARGETMENUID=2
Menu_DisplayOptions_Resolution(){
	
	#Return to Display Options Menu
    TARGETMENUID=1

	#Odroid C1
	if (( $HW_MODEL == 10 )); then
		#Get Current Values
		local current_resolution=$(cat /boot/boot.ini | grep 'setenv m "' | awk -F '"' '{print $2}')

		WHIP_TITLE="---------- DietPi - Resolution ----------"
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Hardware : $HW_MODEL_DESCRIPTION \n Current: $current_resolution" --cancel-button "Back" 16 60 6 \
		"1080p" "1920 x 1080" \
		"720p" "1280 x 720" \
		"480p" "720 x 480" \
		"PC1" "1024 x 768" 3>&1 1>&2 2>&3)

		case "$OPTION" in
		  1080p)
			sed -i '/setenv m /c\setenv m "1080p"' /boot/boot.ini
			REBOOT_REQUIRED=true
			#Return to This Menu
			TARGETMENUID=2
			;;
		  720p)
			sed -i '/setenv m /c\setenv m "720p"' /boot/boot.ini
			REBOOT_REQUIRED=true
			#Return to This Menu
			TARGETMENUID=2
			;;
		  480p)
			sed -i '/setenv m /c\setenv m "480p"' /boot/boot.ini
			REBOOT_REQUIRED=true
			#Return to This Menu
			TARGETMENUID=2
			;;
		  PC1)
			sed -i '/setenv m /c\setenv m "1024x768"' /boot/boot.ini
			REBOOT_REQUIRED=true
			#Return to This Menu
			TARGETMENUID=2
			;;
		esac
				
	#RPI	
	else
		#Get Current Values
		local framebuffer_x=$(cat /boot/config.txt | grep framebuffer_width= | tr -d '#framebuffer_width=')
		local framebuffer_y=$(cat /boot/config.txt | grep framebuffer_height= | tr -d '#framebuffer_height=')
		local display_output_text="$framebuffer_x X $framebuffer_y"

		#check for headless
		if (($(cat /boot/dietpi.txt | grep -ci -m1 'rpi_hdmi_output=0') == 1)); then
                display_output_text="Headless"
        fi

		WHIP_TITLE="---------- DietPi - Resolution ----------"
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Hardware : $HW_MODEL_DESCRIPTION \n Current: $display_output_text" --cancel-button "Back" 17 60 7 \
		"1080p" "1920 x 1080" \
		"720p" "1280 x 720" \
		"480p" "854 x 480" \
		"PC1" "1024 x 768" \
		"PC2" "800 x 640" \
		"PC3" "640 x 480" \
		"Headless" "Disables HDMI Output" 3>&1 1>&2 2>&3)

		case "$OPTION" in
		  1080p)
			sed -i "/rpi_hdmi_output=/c\rpi_hdmi_output=1" /boot/dietpi.txt
			sed -i '/framebuffer_width=/c\framebuffer_width=1920' /boot/config.txt
			sed -i '/framebuffer_height=/c\framebuffer_height=1080' /boot/config.txt
			REBOOT_REQUIRED=true
			#Return to This Menu
			TARGETMENUID=2
			;;
		  720p)
			sed -i "/rpi_hdmi_output=/c\rpi_hdmi_output=1" /boot/dietpi.txt
			sed -i '/framebuffer_width=/c\framebuffer_width=1280' /boot/config.txt
			sed -i '/framebuffer_height=/c\framebuffer_height=720' /boot/config.txt
			REBOOT_REQUIRED=true
			#Return to This Menu
			TARGETMENUID=2
			;;
		  480p)
			sed -i "/rpi_hdmi_output=/c\rpi_hdmi_output=1" /boot/dietpi.txt
			sed -i '/framebuffer_width=/c\framebuffer_width=854' /boot/config.txt
			sed -i '/framebuffer_height=/c\framebuffer_height=480' /boot/config.txt
			REBOOT_REQUIRED=true
			#Return to This Menu
			TARGETMENUID=2
			;;
		  PC1)
			sed -i "/rpi_hdmi_output=/c\rpi_hdmi_output=1" /boot/dietpi.txt
			sed -i '/framebuffer_width=/c\framebuffer_width=1024' /boot/config.txt
			sed -i '/framebuffer_height=/c\framebuffer_height=768' /boot/config.txt
			REBOOT_REQUIRED=true
			#Return to This Menu
			TARGETMENUID=2
			;;
		  PC2)
			sed -i "/rpi_hdmi_output=/c\rpi_hdmi_output=1" /boot/dietpi.txt
			sed -i '/framebuffer_width=/c\framebuffer_width=800' /boot/config.txt
			sed -i '/framebuffer_height=/c\framebuffer_height=640' /boot/config.txt
			REBOOT_REQUIRED=true
			#Return to This Menu
			TARGETMENUID=2
			;;
		  PC3)
			sed -i "/rpi_hdmi_output=/c\rpi_hdmi_output=1" /boot/dietpi.txt
			sed -i '/framebuffer_width=/c\framebuffer_width=640' /boot/config.txt
			sed -i '/framebuffer_height=/c\framebuffer_height=480' /boot/config.txt
			REBOOT_REQUIRED=true
			#Return to This Menu
			TARGETMENUID=2
			;;
		  Headless)
			whiptail --title "$WHIP_TITLE" --msgbox " Using the Headless option will: \n - Disable HDMI output \n - Lower energy consumption by 0.1+ Watts \n - Set framebuffer to 16x16xD8 \n - Improve RAM performance by 1-5% (VideoCore shares RAM bandwidth) \n - More info here : https://www.raspberrypi.org/forums/viewtopic.php?p=105008#p105008" --backtitle "$WHIP_BACKTITLE" 14 75
			sed -i "/rpi_hdmi_output=/c\rpi_hdmi_output=0" /boot/dietpi.txt
			REBOOT_REQUIRED=true
			#Return to This Menu
			TARGETMENUID=2
			;;
		esac
	fi

}

#TARGETMENUID=3
Menu_AdvancedOptions(){

    TARGETMENUID=0
	
	#Get Current Settings
	local swap_size=$(cat /etc/dphys-swapfile | sed 's/CONF_SWAPSIZE=//g')

	local usb_max_current_enabled=$(cat /boot/config.txt | grep -ci -m1 'max_usb_current=1')
    local usb_max_current_text='Disabled'
	if [ "$usb_max_current_enabled" = 1 ]; then
		usb_max_current_text='Enabled'
	fi
	
	local hq_analogue_audio_enabled=$(cat /boot/config.txt | grep -ci -m1 'avoid_pwm_pll=0')
    local hq_analogue_audio_current_text='Disabled'
	if [ "$hq_analogue_audio_enabled" = 1 ]; then
		hq_analogue_audio_current_text='Enabled'
	fi
	
	#Odroid C1
	if (( $HW_MODEL == 10 )); then
		usb_max_current_text=$HW_MSG_NOTSUPPORTED
		hq_analogue_audio_current_text=$HW_MSG_NOTSUPPORTED
	fi
	
    WHIP_TITLE='---------- DietPi - Advanced Options ----------'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Make a Selection" --cancel-button "Back" 14 60 6 \
    "1" "Swapfile Size: $swap_size MB" \
    "2" "Update Firmware" \
    "3" "HQ Analogue Audio: $hq_analogue_audio_current_text" \
    "4" "Switch Audio Output" \
    "5" "Max Usb Current: $usb_max_current_text" 3>&1 1>&2 2>&3)

    CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
     	if [ "$OPTION" = 1 ]; then
			MIN_VALUE=100
			MAX_VALUE=2000			
			OPTION=$(whiptail --inputbox "This will set the size of your swap file in MB. \n - Recommended value = 100 \n - Valid range $MIN_VALUE - $MAX_VALUE" 11 60 "$swap_size" --title "SwapFile Size (MB)" 3>&1 1>&2 2>&3)
			CHOICE=$?
			if [ "$CHOICE" = 0 ]; then
			    if [[ $OPTION =~ ^-?[0-9]+$ ]] && (($OPTION <= $MAX_VALUE)) && (($OPTION >= $MIN_VALUE)); then
					sed -i "/CONF_SWAPSIZE/c\CONF_SWAPSIZE=$OPTION" /etc/dphys-swapfile
					REBOOT_REQUIRED=true
				else
					whiptail --title "Invalid Value" --msgbox "$OPTION is an invalid value. No changes have been applied" --backtitle "$WHIP_BACKTITLE" 10 60
				fi
			fi
			
 			#Return to This Menu
			TARGETMENUID=3
     	elif [ "$OPTION" = 2 ]; then
			if (( $HW_MODEL == 10 )); then
				WHIP_QUESTION=" Would you like to update the firmware on your $HW_MODEL_DESCRIPTION? \n - This will run apt-get dist-upgrade"
				whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --backtitle "$WHIP_BACKTITLE" 12 60
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
					whiptail --title "Info" --msgbox "When asked to abort installation, select NO." --backtitle "$WHIP_BACKTITLE" 10 60
					apt-get update
					apt-get dist-upgrade --no-install-recommends -y 
					REBOOT_REQUIRED=true
				fi
			else
				WHIP_QUESTION=" Would you like to update the firmware on your Pi? \n - This will run rpi-update"
				whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --backtitle "$WHIP_BACKTITLE" 12 60
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
					rpi-update
					REBOOT_REQUIRED=true
				fi
			fi
			
 			#Return to This Menu
			TARGETMENUID=3
        elif [ "$OPTION" = 3 ]; then
			#Odroid C1
			if (( $HW_MODEL == 10 )); then
				HW_OptionNotSupported
		    #Enabled
			elif [ "$hq_analogue_audio_enabled" = 1 ]; then
				WHIP_QUESTION=" Current setting: $hq_analogue_audio_current_text \n Would you like to disable this setting ? \n \n Once Disabled: \n - No dedicated pll to PWM audio \n - Reduces analogue audio quality \n - Allows core_freq to be set independently from the GPU"
				whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --yes-button "Disable" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
                    sed -i '/avoid_pwm_pll=/c\avoid_pwm_pll=1' /boot/config.txt
					REBOOT_REQUIRED=true
				fi
			#Disabled
			elif [ "$hq_analogue_audio_enabled" = 0 ]; then
				WHIP_QUESTION=" Current setting: $hq_analogue_audio_current_text \n Would you like to enable this setting ? \n \n Once Enabled: \n - Dedicated pll to PWM audio \n - Maximum analogue audio quality \n - Any core_freq overclocking will also effect GPU clock"
				whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --yes-button "Enable" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
                    sed -i '/avoid_pwm_pll=/c\avoid_pwm_pll=0' /boot/config.txt
					REBOOT_REQUIRED=true
				fi
			fi

			#Return to This Menu
			TARGETMENUID=3
     	elif [ "$OPTION" = 4 ]; then
			#Odroid C1
			if (( $HW_MODEL == 10 )); then
				HW_OptionNotSupported
			else
				OPTION=$(whiptail --title "Switch Audio Output" --menu "" --cancel-button "Back" 10 60 3 \
				"0" "Auto (HDMI if connected, else 3.5mm Analogue)" \
				"1" "Force 3.5mm Analogue Output" \
				"2" "Force HDMI Output" 3>&1 1>&2 2>&3)
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
					amixer cset numid=3 "$OPTION"
				fi
			fi
			
			#Return to This Menu
			TARGETMENUID=3
    	elif [ "$OPTION" = 5 ]; then
			#Odroid C1
			if (( $HW_MODEL == 10 )); then
				HW_OptionNotSupported
		    #Enabled
			elif [ "$usb_max_current_enabled" = 1 ]; then
				WHIP_QUESTION=" Current setting: $usb_max_current_text (1.2AMP) \n Would you like to disable this setting ? \n \n Once Disabled: \n - Max USB current will be set to 0.6AMP (default)"
				whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --yes-button "Disable" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 12 60
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
                    sed -i '/max_usb_current=/c\max_usb_current=0' /boot/config.txt
					REBOOT_REQUIRED=true
				fi
			#Disabled
			elif [ "$usb_max_current_enabled" = 0 ]; then
				WHIP_QUESTION=" Current setting: $usb_max_current_text (0.6AMP) \n Would you like to enable this setting ? \n \n Once Enabled: \n - Max USB current will be set to 1.2AMP \n - (Warning) Do not enable this setting, unless you have a 2AMP+ PSU. "
				whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --yes-button "Enable" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
                    sed -i '/max_usb_current=/c\max_usb_current=1' /boot/config.txt
					REBOOT_REQUIRED=true
				fi
			fi

			#Return to This Menu
			TARGETMENUID=3
			
        fi
	fi
}

#TARGETMENUID=4
Menu_PerformanceOptions(){

    TARGETMENUID=0
	
	local current_cpu_throttle_up=$(cat /boot/dietpi.txt | grep 'cpu_usage_throttle_up' | sed 's/cpu_usage_throttle_up=//g')
	local current_cpu_governor=$(cat /boot/dietpi.txt | grep 'cpu_governor=' | sed 's/cpu_governor=//g')

	local frequency_min_cpu_governor=$(( $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq) / 1000 ))
	local frequency_max_cpu_governor=$(( $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq) / 1000 ))
	
	local current_arm_temp_limit=$(cat /boot/config.txt | grep 'temp_limit' | sed 's/temp_limit=//g')
	local current_initial_turbo=$(cat /boot/config.txt | grep 'initial_turbo' | sed 's/initial_turbo=//g')

	local arm_temp=$(cat /sys/class/thermal/thermal_zone0/temp | awk '{print $1/1000}' | xargs printf "%0.1f" )
	#local arm_temp_fahrenheit=$(( $arm_temp / 1000.0f * 9.0f / 5.0f + 32.0f ))
	local memory_total=$(( $(cat /proc/meminfo | grep 'MemTotal:' | awk '{print $2}') / 1000 ))
	local memory_free=$(( $(cat /proc/meminfo | grep 'MemFree:' | awk '{print $2}') / 1000 ))
	local memory_usage=$(($memory_total - $memory_free))
	
	local text_current_initial_turbo="$current_initial_turbo seconds"
	if [ "$current_initial_turbo" = 0 ]; then
		text_current_initial_turbo="Disabled"
	fi

	#Odroid C1
	if (( $HW_MODEL == 10 )); then
		current_arm_temp_limit=$HW_MSG_NOTSUPPORTED
		current_initial_turbo=$HW_MSG_NOTSUPPORTED
		text_current_initial_turbo=$HW_MSG_NOTSUPPORTED
	fi
	
    WHIP_TITLE='---------- DietPi - Performance Options ----------'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Hardware : $HW_MODEL_DESCRIPTION \n ARM Temp: $arm_temp 'c\n RAM: $memory_total MB | Used: $memory_usage MB | Free: $memory_free MB" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 16 60 5 \
    "1" "Change Overclocking Profile" \
    "2" "CPU Governor     : $current_cpu_governor" \
    "3" "CPU Throttle Up  : $current_cpu_throttle_up%" \
    "4" "ARM Initial Turbo: $text_current_initial_turbo" \
    "5" "ARM Temp Limit   : $current_arm_temp_limit'c" 3>&1 1>&2 2>&3)

    CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
        if [ "$OPTION" = 1 ]; then
			#Odroid C1
			if (( $HW_MODEL == 10 )); then
				HW_OptionNotSupported
				#Return to This Menu
				TARGETMENUID=4
			#Rpi
			else
				TARGETMENUID=13
			fi
        elif [ "$OPTION" = 2 ]; then
			OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Change CPU Governor: \nOndemand     | Dynamic CPU frequency based on usage (recommended). \nConservative | Same as ondemand. Bias towards powersaving, slower scaling. \nPowersave    | Static. Reduces energy consumption, heat, performance. \nPerformance  | Static. Increases energy consumption, heat, performance." --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 16 80 4 \
			"ondemand" "Scales CPU frequency between $frequency_min_cpu_governor Mhz and $frequency_max_cpu_governor Mhz." \
			"conservative" "Scales CPU frequency between $frequency_min_cpu_governor Mhz and $frequency_max_cpu_governor Mhz." \
			"powersave" "Limits CPU frequency to $frequency_min_cpu_governor Mhz." \
			"performance" "Forces CPU frequency to $frequency_max_cpu_governor Mhz." 3>&1 1>&2 2>&3)
			CHOICE=$?
			if [ "$CHOICE" = 0 ]; then
				sed -i "/cpu_governor=/c\cpu_governor=$OPTION" /boot/dietpi.txt
				/boot/dietpi/dietpi-cpu_set
			fi
			
			#Return to This Menu
			TARGETMENUID=4
        elif [ "$OPTION" = 3 ]; then
			MIN_VALUE=30
			MAX_VALUE=95			
			OPTION=$(whiptail --inputbox "When the CPU usage (%) is greater than this value, the CPU frequency will increase from $frequency_min_cpu_governor Mhz to $frequency_max_cpu_governor Mhz. \n - Recommended value | 60 (server) | 40 (desktop) \n - Valid range $MIN_VALUE - $MAX_VALUE \n - Applied when CPU governor is ondemand or conservative" 11 70 "$current_cpu_throttle_up" --title "CPU Throttle Up %" 3>&1 1>&2 2>&3)
			CHOICE=$?
			if [ "$CHOICE" = 0 ]; then
			    if [[ $OPTION =~ ^-?[0-9]+$ ]] && (($OPTION <= $MAX_VALUE)) && (($OPTION >= $MIN_VALUE)); then
					sed -i "/cpu_usage_throttle_up=/c\cpu_usage_throttle_up=$OPTION" /boot/dietpi.txt
					#Apply changes
					/boot/dietpi/dietpi-cpu_set
				else
					whiptail --title "Invalid Value" --msgbox "$OPTION is an invalid value. No changes have been applied" --backtitle "$WHIP_BACKTITLE" 10 60
				fi
			fi
			#Return to this menu
			TARGETMENUID=4
         elif [ "$OPTION" = 4 ]; then
			#Odroid C1
			if (( $HW_MODEL == 10 )); then
				HW_OptionNotSupported
				#Return to This Menu
			#Rpi
			else
				MIN_VALUE=0
				MAX_VALUE=60			
				OPTION=$(whiptail --inputbox "Activates turbo mode during boot ($frequency_max_cpu_governor Mhz), for the duration of value in seconds. \n - Recommended value is 20 \n - Valid range $MIN_VALUE (disabled) - $MAX_VALUE" 12 60 "$current_initial_turbo" --title "ARM Initial Turbo Duration" 3>&1 1>&2 2>&3)
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
					if [[ $OPTION =~ ^-?[0-9]+$ ]] && (($OPTION <= $MAX_VALUE)) && (($OPTION >= $MIN_VALUE)); then
						sed -i "/initial_turbo=/c\initial_turbo=$OPTION" /boot/config.txt
						REBOOT_REQUIRED=true
					else
						whiptail --title "Invalid Value" --msgbox "$OPTION is an invalid value. No changes have been applied" --backtitle "$WHIP_BACKTITLE" 10 60
					fi
				fi
			fi
			#Return to this menu
			TARGETMENUID=4
       elif [ "$OPTION" = 5 ]; then
			#Odroid C1
			if (( $HW_MODEL == 10 )); then
				HW_OptionNotSupported
				#Return to This Menu
			#Rpi
			else
				MIN_VALUE=45
				MAX_VALUE=85			
				OPTION=$(whiptail --inputbox "When the ARM temprature ('c) reaches this value, the ARM will underclock to reduce heat. \n - Recommended value is 65  \n - Valid range $MIN_VALUE - $MAX_VALUE" 11 60 "$current_arm_temp_limit" --title "ARM Temprature Limit" 3>&1 1>&2 2>&3)
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
					if [[ $OPTION =~ ^-?[0-9]+$ ]] && (($OPTION <= $MAX_VALUE)) && (($OPTION >= $MIN_VALUE)); then
						sed -i "/temp_limit=/c\temp_limit=$OPTION" /boot/config.txt
						REBOOT_REQUIRED=true
					else
						whiptail --title "Invalid Value" --msgbox "$OPTION is an invalid value. No changes have been applied" --backtitle "$WHIP_BACKTITLE" 10 60
					fi
				fi
			fi
			#Return to this menu
			TARGETMENUID=4
        fi
    fi
}

Change_Password(){

    local PasswordRecieved=0

    #1st input
    local passw1=$(whiptail --passwordbox "Please Enter Your New Password" 8 60 --title "Change PW" 3>&1 1>&2 2>&3)
    CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
	    ((PasswordRecieved++))
	fi

	#2nd input (confirm)
    local passw2=$(whiptail --passwordbox "Please Confirm Your New Password" 8 60 --title "Confirm PW" 3>&1 1>&2 2>&3)
    CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
        ((PasswordRecieved++))
	fi
	
    #Password Mismatch
	if [ "$passw1" != "$passw2" ]; then
        WHIP_TITLE='Error - Password Mismatch'
        whiptail --title "$WHIP_TITLE" --msgbox " The Passwords you have entered do not match, therefor, no changes have been applied. Please try again" 8 60
    #Change password
	elif [ "$PasswordRecieved" = 2 ]; then
        echo -e "$passw1\n$passw1" | passwd -q root
        WHIP_TITLE='Password Applied'
        whiptail --title "$WHIP_TITLE" --msgbox " Your new password has successfully been applied." 8 60
    #Aborted
	else
        WHIP_TITLE='Password Aborted'
        whiptail --title "$WHIP_TITLE" --msgbox " Password change has been aborted. No changes have been applied" 8 60
	fi	
}

Change_Hostname(){

    #Get existing Hostname
    local hostname_existing=$(cat /etc/hostname)
    OPTION=$(whiptail --inputbox "Enter Your New Hostname" 8 60 "$hostname_existing" --title "Change Hostname" --backtitle "$WHIP_BACKTITLE" 3>&1 1>&2 2>&3)
	CHOICE=$?
    if [ "$CHOICE" = 0 ] && [ "$hostname_existing" != "$OPTION" ]; then
		
	    sed -i "s/$hostname_existing/$OPTION/g" /etc/hosts
        sed -i "s/$hostname_existing/$OPTION/g" /etc/hostname
        REBOOT_REQUIRED=true
        WHIP_TITLE='Hostname Change Completed'
        whiptail --title "$WHIP_TITLE" --msgbox " Your Hostname has been changed: \n - From $hostname_existing \n - To $OPTION" 9 60
    #Aborted
	else
        WHIP_TITLE='Hostname Change Aborted'
        whiptail --title "$WHIP_TITLE" --msgbox " Hostname change has been aborted. No changes have been applied" 8 60
	fi
}

#TARGETMENUID=5
Menu_SecurityOptions(){

    TARGETMENUID=0

    WHIP_TITLE='---------- DietPi - Security Options ----------'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Lock down your DietPi Install" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 14 60 2 \
    "1" "Change Root Password" \
    "2" "Change Hostname" 3>&1 1>&2 2>&3)

    CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
        if [ "$OPTION" = 1 ]; then
             Change_Password
			 TARGETMENUID=5
        elif [ "$OPTION" = 2 ]; then
             Change_Hostname
			 TARGETMENUID=5
        fi
    fi
}

#TARGETMENUID=6
Menu_GpumemoryOptions(){

    TARGETMENUID=1
	
	#Get Current MemorySplit Settings 
    local gpu_mem_value=0
	local ram_mem_value=0
	local gpu_target_value=0
	
	local display_output_enabled=1
	local display_vpu_enabled=1
	local display_output_text="Enabled"
	local display_vpu_text="Enabled"

	if [ "$HW_MODEL" = 0 ]; then
	    gpu_mem_value=$(grep 'gpu_mem_256=' /boot/config.txt  | sed 's/gpu_mem_256=//g')
		ram_mem_value=$((256-gpu_mem_value))
	elif (( $HW_MODEL == 1 )); then
	    gpu_mem_value=$(grep 'gpu_mem_512=' /boot/config.txt  | sed 's/gpu_mem_512=//g')
		ram_mem_value=$((512-gpu_mem_value))
	elif (( $HW_MODEL == 2 )); then
	    gpu_mem_value=$(grep 'gpu_mem_1024=' /boot/config.txt  | sed 's/gpu_mem_1024=//g')
		ram_mem_value=$((1024-gpu_mem_value))
	elif (( $HW_MODEL == 10 )); then
		ram_mem_value=$(free -m | grep 'Mem:' | awk '{print $2}')
	    gpu_mem_value=$((1024-ram_mem_value))

		#Odroid HDMI/headless data
		display_output_enabled=$(cat /boot/boot.ini | grep -ci -m1 'setenv hdmioutput "1"')
		display_vpu_enabled=$(cat /boot/boot.ini | grep -ci -m1 'setenv vpu "1"')
	
		if [ "$display_output_enabled" = 0 ]; then
			display_output_text="Disabled"
		fi
		if [ "$display_vpu_enabled" = 0 ]; then
			display_vpu_text="Disabled"
		fi
	fi
	
	#Variable to store user selected value
	gpu_target_value="$gpu_mem_value"
	
	WHIP_TITLE="---------- DietPi - GPU/RAM Split ----------"
	#Odroid C1
	if (( $HW_MODEL == 10 )); then
	
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Hardware : $HW_MODEL_DESCRIPTION \n Current  : HDMI: $display_output_text | VPU: $display_vpu_text \n Memory   : $gpu_mem_value MB GPU | $ram_mem_value MB RAM \n NB: GPU/RAM figures require a reboot after a change is made." --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 15 70 3 \
		"Headless" "HDMI: Disabled | VPU: Disabled" \
		"Server" "HDMI: Enabled  | VPU: Disabled" \
		"Desktop" "HDMI: Enabled  | VPU: Enabled" 3>&1 1>&2 2>&3)

		case "$OPTION" in
		  Headless)
			display_output_enabled=0
			display_vpu_enabled=0
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		  Server)
			display_output_enabled=1
			display_vpu_enabled=0
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		  Desktop)
			display_output_enabled=1
			display_vpu_enabled=1
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		esac
		
		#save
		sed -i '/setenv hdmioutput /c\setenv hdmioutput "$display_output_enabled"' /boot/boot.ini
		sed -i '/setenv vpu /c\setenv vpu "$display_vpu_enabled"' /boot/boot.ini
	#Pi1 256
	elif (( $HW_MODEL == 0 )); then
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Hardware : $HW_MODEL_DESCRIPTION \n Current: $gpu_mem_value MB GPU | $ram_mem_value MB RAM" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 14 75 4 \
		"Server" "16 MB GPU | 240 MB RAM" \
		"Desktop" "64 MB GPU | 192 MB RAM" \
		"Kodi" "128 MB GPU | 128 MB RAM" 3>&1 1>&2 2>&3)

		case "$OPTION" in
		  Server)
			gpu_target_value=16
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		  Desktop)
			gpu_target_value=64
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		  Kodi)
			gpu_target_value=128
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		esac
    	#save
    	sed -i "/gpu_mem_256=/c\gpu_mem_256=$gpu_target_value" /boot/config.txt
	#Pi1 512
	elif (( $HW_MODEL == 1 )); then
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Hardware : $HW_MODEL_DESCRIPTION \n Current: $gpu_mem_value MB GPU | $ram_mem_value MB RAM" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 14 75 4 \
		"Server" "16 MB GPU | 496 MB RAM" \
		"Desktop" "64 MB GPU | 448 MB RAM" \
		"Kodi" "128MB GPU | 384 MB RAM" \
		"Gaming" "192MB GPU | 320 MB RAM" 3>&1 1>&2 2>&3)

		case "$OPTION" in
		  Server)
			gpu_target_value=16
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		  Desktop)
			gpu_target_value=64
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		  Kodi)
			gpu_target_value=128
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		  Gaming)
			gpu_target_value=192
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		esac
    	#save
    	sed -i "/gpu_mem_512=/c\gpu_mem_512=$gpu_target_value" /boot/config.txt
	#Pi2 1024
	elif (( $HW_MODEL == 2 )); then
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Hardware : $HW_MODEL_DESCRIPTION \n Current: $gpu_mem_value MB GPU | $ram_mem_value MB RAM" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 14 75 4 \
		"Server" "16 MB GPU | 1008 MB RAM" \
		"Desktop" "128MB GPU | 896 MB RAM" \
		"Kodi" "256MB GPU | 768 MB RAM" \
		"Gaming" "384MB GPU | 640 MB RAM" 3>&1 1>&2 2>&3)

		case "$OPTION" in
		  Server)
			gpu_target_value=16
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		  Desktop)
			gpu_target_value=128
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		  Kodi)
			gpu_target_value=256
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		  Gaming)
			gpu_target_value=384
			REBOOT_REQUIRED=true
			#Return to this menu
			TARGETMENUID=6
			;;
		esac
	    #save
	    sed -i "/gpu_mem_1024=/c\gpu_mem_1024=$gpu_target_value" /boot/config.txt
	fi
}

#TARGETMENUID=7
Menu_LanguageOptions(){

    TARGETMENUID=0
	
    WHIP_TITLE='--- DietPi - Language and Regional Options ---'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Make a Selection" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 14 60 3 \
    "Locale" "Change Language and Regional Settings" \
    "Timezone" "Change Timezone Location Setting" \
    "Keyboard" "Change Keyboard Language Setting" 3>&1 1>&2 2>&3)

	case "$OPTION" in
	  Locale)
		REBOOT_REQUIRED=true
		dpkg-reconfigure locales

		#Return to this menu
		TARGETMENUID=7
		;;
	  Timezone)
		REBOOT_REQUIRED=true
		dpkg-reconfigure tzdata

		#Return to this menu
		TARGETMENUID=7
		;;
	  Keyboard)
		REBOOT_REQUIRED=true
        dpkg-reconfigure keyboard-configuration
        invoke-rc.d keyboard-setup start
 
		#Return to this menu
		TARGETMENUID=7
       ;;
	esac
}

SHARED_IP_STATIC="0.0.0.0"
SHARED_GATEWAY_STATIC="0.0.0.0"
SHARED_MASK_STATIC="0.0.0.0"

ETH_DISABLED=0
ETH_HARDWARE=false
ETH_CONNECTED=0
ETH_IP="0.0.0.0"
ETH_GATEWAY="0.0.0.0"
ETH_MASK="0.0.0.0"
ETH_MODE=0 #0=static 1=dhcp
ETH_MODE_TARGET=0

WIFI_DISABLED=0
WIFI_HARDWARE=false
WIFI_CONNECTED=0
WIFI_IP="0.0.0.0"
WIFI_GATEWAY="0.0.0.0"
WIFI_MASK="0.0.0.0"
WIFI_MODE=0 #0=static 1=dhcp
WIFI_MODE_TARGET=0
WIFI_SSID=""
WIFI_KEY=""
WIFI_BITRATE=0
WIFI_SIGNALSTRENGTH=0


Network_ETH_CopyCurrentToStatic(){

    #Apply, Only if we have a connection (prevent blank details which breaks networking)
	if [ "$ETH_CONNECTED" = 1 ]; then
		sed -i "/address/c\address $ETH_IP" /etc/network/interfaces
		sed -i "/gateway/c\gateway $ETH_GATEWAY" /etc/network/interfaces
		sed -i "/netmask/c\netmask $ETH_MASK" /etc/network/interfaces
	fi
}

Network_WIFI_CopyCurrentToStatic(){

    #Apply, Only if we have a connection (prevent blank details which breaks networking)
	if [ "$WIFI_CONNECTED" = 1 ]; then
		sed -i "/address/c\address $WIFI_IP" /etc/network/interfaces
		sed -i "/gateway/c\gateway $WIFI_GATEWAY" /etc/network/interfaces
		sed -i "/netmask/c\netmask $WIFI_MASK" /etc/network/interfaces
	fi
}

Network_Restart(){

    #Release all DHCP leases (too slow, quicker to allow router to decide leases)
	#dhclient -r
	
	#Kill dhclient
	killall dhclient &> /dev/null

    #Drop Connections
	ifdown eth0 &> /dev/null
	ifdown wlan0 &> /dev/null
	
	#Restart Networking
	/etc/init.d/networking reload
	/etc/init.d/networking restart
	
	#Ubuntu - Manually bring up adapters
	if (( $DISTRO == 2 )); then
		if [ "$WIFI_DISABLED" = 0 ]; then
			ifup wlan0
		elif [ "$ETH_DISABLED" = 0 ]; then
			ifup eth0
		fi
	fi

}

Network_ApplyChanges(){

    #Eth Mode change
	if [ "$ETH_MODE_TARGET" = 0 ]; then
		#Change to STATIC
		sed -i '/iface eth0 inet/c\iface eth0 inet static' /etc/network/interfaces
	elif [ "$ETH_MODE_TARGET" = 1 ]; then
		#Change to DHCP
		sed -i '/iface eth0 inet/c\iface eth0 inet dhcp' /etc/network/interfaces
	fi
	#Update Current Mode for network restart
	ETH_MODE=$ETH_MODE_TARGET
	
    #Wifi Mode change
	if [ "$WIFI_MODE_TARGET" = 0 ]; then
		#Change to STATIC
		sed -i '/iface wlan0 inet/c\iface wlan0 inet static' /etc/network/interfaces
	elif [ "$WIFI_MODE_TARGET" = 1 ]; then
		#Change to DHCP
		sed -i '/iface wlan0 inet/c\iface wlan0 inet dhcp' /etc/network/interfaces
	fi
	#Update Current Mode for network restart
	WIFI_MODE=$WIFI_MODE_TARGET
	
	#restart net
	Network_Restart
}

Change_StaticIp(){
    #Ethernet
    OPTION=$(whiptail --inputbox "Enter Your New Ip Address" 8 60 "$SHARED_IP_STATIC" --title "Set Static Ip Address" 3>&1 1>&2 2>&3)
	CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
		sed -i "/address/c\address $OPTION" /etc/network/interfaces
	fi
}

Change_StaticGateway(){
    OPTION=$(whiptail --inputbox "Enter Your New Gateway Address" 8 60 "$SHARED_GATEWAY_STATIC" --title "Set Static Gateway Address" 3>&1 1>&2 2>&3)
	CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
	    sed -i "/gateway/c\gateway $OPTION" /etc/network/interfaces
	fi
}

Change_StaticMask(){
    OPTION=$(whiptail --inputbox "Enter Your New Mask Address" 8 60 "$SHARED_MASK_STATIC" --title "Set Static Mask Address" 3>&1 1>&2 2>&3)
	CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
		sed -i "/netmask/c\netmask $OPTION" /etc/network/interfaces
	fi
}

Change_WifiSsid(){
    OPTION=$(whiptail --inputbox "Enter the SSID name to connect to." 8 60 "$WIFI_SSID" --title "Set Your SSID" 3>&1 1>&2 2>&3)
	CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
		sed -i "/wireless-essid/c\wireless-essid $OPTION" /etc/network/interfaces
		sed -i "/wpa-ssid/c\wpa-ssid $OPTION" /etc/network/interfaces
	fi
}

Change_WifiKey(){
    OPTION=$(whiptail --inputbox "Enter the Access Key (WPA/WEP)." 8 60 "$WIFI_KEY" --title "Set Your Acccess Key" 3>&1 1>&2 2>&3)
	CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
		sed -i "/wireless-key/c\wireless-key $OPTION" /etc/network/interfaces
		sed -i "/wpa-psk/c\wpa-psk $OPTION" /etc/network/interfaces
	fi
}

Scan_Wifi(){

	#Get all ssids
	clear
	echo -e "Scanning SSIDS, please wait...."
	echo -e "-------------------------------"
	iwlist wlan0 scan | grep ESSID: | sed 's/ESSID:"//g' | sed 's/"//g' | awk '{ print $1 }' > /var/log/dietpi_wifi_list_temp

	#read file to array
	readarray wifi_ssid_array < /var/log/dietpi_wifi_list_temp
	#Create List with indexs for Whiptail
	local wifi_ssid_list=()
	for ((i=0; i<${#wifi_ssid_array[@]}; i++))
	do
		wifi_ssid_list+=("$i" "${wifi_ssid_array[$i]}")
	done
	
    WHIP_TITLE='------ DietPi-Config - Wifi SSID Scan ------'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Please select a Wifi SSID" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 14 60 6 "${wifi_ssid_list[@]}" 3>&1 1>&2 2>&3)

    CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
		WIFI_SSID=${wifi_ssid_array[$OPTION]}
		sed -i "/wireless-essid/c\wireless-essid $WIFI_SSID" /etc/network/interfaces
		sed -i "/wpa-ssid/c\wpa-ssid $WIFI_SSID" /etc/network/interfaces
		Change_WifiKey
	fi

	#delete[] arrays
	unset wifi_ssid_array
	unset wifi_ssid_list

}

Wifi_Reconnect(){
	WHIP_QUESTION="SSID: $WIFI_SSID \nKEY: $WIFI_KEY \n\nConnect now? \n\n(NOTICE) All connections will be dropped!"
	whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --yes-button "Connect" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
	CHOICE=$?
	if [ "$CHOICE" = 0 ]; then
		#Apply Changes
		clear
		echo -e "Connecting to $WIFI_SSID , please wait"
		Network_ApplyChanges
	fi
}

Ethernet_Reconnect(){
	WHIP_QUESTION="Do you wish to apply settings and reconnect network now? \n\n(NOTICE) All connections will be dropped!"
	whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --yes-button "Connect" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
	CHOICE=$?
	if [ "$CHOICE" = 0 ]; then
		#Apply Changes
		clear
		echo -e "Reconnecting Ethernet , please wait"
		Network_ApplyChanges
	fi
}


INTERNET_ONLINE=0 # 0=not tested, 1=failed, 2=online
INTERNET_URL="http://mirrordirector.raspbian.org"

Network_CheckInternetConnection(){

	INTERNET_ONLINE=0 #Not tested
	
	#Check for connection
    wget -q --spider $INTERNET_URL
    if [ $? -eq 0 ]; then
	    INTERNET_ONLINE=2 #Online
	else
	    INTERNET_ONLINE=1 #Failed
	fi
}

Network_GetData(){

    #Reset
    SHARED_IP_STATIC="0.0.0.0"
    SHARED_GATEWAY_STATIC="0.0.0.0"
    SHARED_MASK_STATIC="0.0.0.0"

    ETH_DISABLED=$(cat /etc/network/interfaces | grep -ci -m1 '#auto eth0')
	ETH_HARDWARE=false
	ETH_CONNECTED=0
	ETH_IP="0.0.0.0"
	ETH_GATEWAY="0.0.0.0"
	ETH_MASK="0.0.0.0"
    ETH_MODE=0
	
    WIFI_DISABLED=$(cat /etc/network/interfaces | grep -ci -m1 '#auto wlan0')
	WIFI_HARDWARE=false
	WIFI_CONNECTED=0
	WIFI_IP="0.0.0.0"
	WIFI_GATEWAY="0.0.0.0"
	WIFI_MASK="0.0.0.0"
	WIFI_MODE=0
    WIFI_SSID="Not_Set"
    WIFI_KEY="Not_Set"
	#Get extra wifi stats
	WIFI_BITRATE=0
	WIFI_SIGNALSTRENGTH=0
	
	#Grab static address from /etc/network/interfaces
    SHARED_IP_STATIC=$(cat /etc/network/interfaces  | grep -m1 'address' | awk '{ print $2 }')
    SHARED_GATEWAY_STATIC=$(cat /etc/network/interfaces  | grep -m1 'gateway' | awk '{ print $2 }')
    SHARED_MASK_STATIC=$(cat /etc/network/interfaces  | grep -m1 'netmask' | awk '{ print $2 }')
	
	#eth0
	if [ -d /sys/class/net/eth0 ]; then
	    #Hardware
	    ETH_HARDWARE=true
		
		#Static or Dhcp?
		ETH_MODE=$(cat /etc/network/interfaces | grep -ci -m1 'iface eth0 inet dhcp')
		
		#Connected and Valid IP?
		ETH_CONNECTED=$(ip r | grep -ci -m1 'eth0')
		
		#Enabled and Connected
		if [ "$ETH_DISABLED" = 0 ] && [ "$ETH_CONNECTED" = 1 ]; then
			ETH_IP=$(ifconfig eth0 | grep inet | awk '{ print $2 }' | sed 's/addr://g')
			#gateway
			ETH_GATEWAY=$(ip r | grep default | awk '{ print $3 }')
			#mask
			ETH_MASK=$(ifconfig eth0 | grep inet | awk '{ print $4 }' | sed 's/Mask://g')
		fi
	fi
	
	# static ip is shared for both Wifi and Ethernet
	
	#wlan0
	if [ -d /sys/class/net/wlan0 ]; then
	    #Hardware
    	WIFI_HARDWARE=true
		
		#Static or Dhcp?
		WIFI_MODE=$(cat /etc/network/interfaces | grep -ci -m1 'iface wlan0 inet dhcp')
		
		#Connected and Valid IP?
		WIFI_CONNECTED=$(ip r | grep -ci -m1 'wlan0')
		
		#Wifi Extras
		WIFI_SSID=$(cat /etc/network/interfaces | grep wireless-essid | sed 's/^[^\ ]\+\ //')
		WIFI_KEY=$(cat /etc/network/interfaces | grep wireless-key | sed 's/^[^\ ]\+\ //')
		
		#Enabled and Connected
		if [ "$WIFI_DISABLED" = 0 ] && [ "$WIFI_CONNECTED" = 1 ]; then
			WIFI_IP=$(ifconfig wlan0 | grep inet | awk '{ print $2 }' | sed 's/addr://g')
			#gateway
			WIFI_GATEWAY=$(ip r | grep default | awk '{ print $3 }')
			#mask
			WIFI_MASK=$(ifconfig wlan0 | grep inet | awk '{ print $4 }' | sed 's/Mask://g')
			#Get extra wifi stats
			WIFI_BITRATE=$(iwconfig wlan0 | grep 'Bit Rate:' | awk '{ print $2 }' | sed 's/Rate://g')
			WIFI_SIGNALSTRENGTH=$(iwconfig wlan0 | grep 'Signal level=' | awk '{ print $4 }' | sed 's/level=//g' | cut -f1 -d "/")
		fi
	fi
}

Menu_SambaClientSetup(){

	local samba_clientname=$(cat /boot/dietpi.txt | grep 'SambaClient_ComputerName' | sed 's/SambaClient_ComputerName=//g')
	local samba_clientshare=$(cat /boot/dietpi.txt | grep 'SambaClient_ShareName' | sed 's/SambaClient_ShareName=//g')
	local samba_clientusename=$(cat /boot/dietpi.txt | grep 'SambaClient_Username' | sed 's/SambaClient_Username=//g')
	local samba_clientpassword=$(cat /boot/dietpi.txt | grep 'SambaClient_Password' | sed 's/SambaClient_Password=//g')
	OPTION=$(whiptail --inputbox "Please enter your Windows Computer name or IP Address" 8 60 "$samba_clientname" --title "Samba Client Setup" 3>&1 1>&2 2>&3)
	CHOICE=$?
	if [ "$CHOICE" = 0 ]; then
		samba_clientname=$OPTION
		
		OPTION=$(whiptail --inputbox "Please enter your Windows Shared Folder Name" 8 60 "$samba_clientshare" --title "Samba Client Setup" 3>&1 1>&2 2>&3)
		CHOICE=$?
		if [ "$CHOICE" = 0 ]; then
			samba_clientshare=$OPTION
		
			#Username
			OPTION=$(whiptail --inputbox "Please enter your Windows Share Username" 8 60 "$samba_clientusename" --title "Samba Client Setup" 3>&1 1>&2 2>&3)
			CHOICE=$?
			if [ "$CHOICE" = 0 ]; then
				samba_clientusename=$OPTION
			
				#Password
				OPTION=$(whiptail --inputbox "Please enter your Windows Share Password \n - (NOTICE) This will be stored with no encryption" 8 60 "$samba_clientpassword" --title "Samba Client Setup" 3>&1 1>&2 2>&3)
				CHOICE=$?
				if [ "$CHOICE" = 0 ]; then
					samba_clientpassword=$OPTION
					
					#Unmount if connected
					umount /mnt/samba
					
					#Save to Dietpi.txt
					sed -i "/SambaClient_ComputerName/c\SambaClient_ComputerName=$samba_clientname" /boot/dietpi.txt
					sed -i "/SambaClient_ShareName/c\SambaClient_ShareName=$samba_clientshare" /boot/dietpi.txt
					sed -i "/SambaClient_Username/c\SambaClient_Username=$samba_clientusename" /boot/dietpi.txt
					sed -i "/SambaClient_Password/c\SambaClient_Password=$samba_clientpassword" /boot/dietpi.txt
					
					#Apply to fstab
					
					#Debian
					if (( $DISTRO == 1 )); then
						cp /boot/dietpi/conf/fstab /etc/fstab
						sed -i "/#DietPi-ConfigSambaClient/c\\/\/$samba_clientname\/$samba_clientshare \/mnt\/samba cifs username=$samba_clientusename,password=$samba_clientpassword,iocharset=utf8,sec=ntlm  0  0" /etc/fstab
					#Ubuntu
					elif (( $DISTRO == 2 )); then
						cp /boot/dietpi/conf/fstab_ubuntu /etc/fstab
						sed -i "/#DietPi-ConfigSambaClient/c\\/\/$samba_clientname\/$samba_clientshare \/mnt\/samba cifs username=$samba_clientusename,password=$samba_clientpassword,iocharset=utf8,sec=ntlm,nobootwait  0  0" /etc/fstab
					fi

					#Mount up
					mount -a
				fi
			fi
		fi
	fi
}

#TARGETMENUID=8
Menu_NetworkOptions(){

    TARGETMENUID=0
	
	#Check Network
	Network_GetData

	#Reset any Target Modes to Current (DHCP/STATIC)
	ETH_MODE_TARGET=$ETH_MODE
	WIFI_MODE_TARGET=$WIFI_MODE

	#Obtain enabled/disabled status
	local eth0_disabled_text='Enabled '
	if [ "$ETH_DISABLED" = 1 ]; then
    	eth0_disabled_text='Disabled'
	fi
	
	local wlan0_disabled_text='Enabled '
	if [ "$WIFI_DISABLED" = 1 ]; then
		wlan0_disabled_text='Disabled'
	fi
	
	#Obtain Hardware Status
	local eth0_hardware_text='Available'
	if [ "$ETH_HARDWARE" = false ]; then
		eth0_hardware_text='Not Found'
	fi
	
	local wlan0_hardware_text='Available'
	if [ "$WIFI_HARDWARE" = false ]; then
		wlan0_hardware_text='Not Found'
	fi
	
	#Obtain Connected/Carrier Status
	local eth0_connected_text='Disconnected'
	if [ "$ETH_CONNECTED" = 1 ]; then
    	eth0_connected_text='Connected'
	fi

	local wlan0_connected_text='Disconnected'
	if [ "$WIFI_CONNECTED" = 1 ]; then
    	wlan0_connected_text='Connected'
	fi
	
	#Internet Connection Status
	local Internet_connected_text='Please run Internet Test' 
	if [ "$INTERNET_ONLINE" = 2 ]; then
    	Internet_connected_text='Online'
	elif [ "$INTERNET_ONLINE" = 1 ]; then
    	Internet_connected_text='Offline / Failed'
	fi
	
	#Set to Not Tested for next loop
	INTERNET_ONLINE=0

	#Samba Client
	local sambashare_active=$(df -h | grep -ci -m1 '/mnt/samba')
	local sambaclient_installed=0
	local sambaclient_status="Not Installed"
	local sambaclient_menutext="Install now to access Windows shares"
	local sambaclient_mounted_size="unknown"
	local sambaclient_mounted_used="unknown"
	local sambaclient_mounted_free="unknown"
	if [ -f /usr/bin/smbclient ]; then
		#Check and Update DietPi .installed (makes sure SMBCLIENT value is 2 if installed from dietpi-config)
		sed -i '/SMBCLIENT/c\SMBCLIENT 2' /boot/dietpi/.installed
		
		sambaclient_installed=1
		sambaclient_status="Unable to connect and/or incorrect details"
		sambaclient_menutext="Input/Modify Details"
		
		if [ "$sambashare_active" = 1 ]; then
			#Get Disk stats
			sambaclient_mounted_size=$(df -h | grep '/mnt/samba' | awk '{ print $2 }')
			sambaclient_mounted_used=$(df -h | grep '/mnt/samba' | awk '{ print $3 }')
			sambaclient_mounted_free=$(df -h | grep '/mnt/samba' | awk '{ print $4 }')
			sambaclient_status="/mnt/samba | Size $sambaclient_mounted_size | Used $sambaclient_mounted_used | Free $sambaclient_mounted_free"
		fi
	fi
	
	#NoIp Client
	local noip_installed=0
	local noip_status="Not Installed"
	local noip_menutext="Install No-Ip now"
	if [ -f /usr/local/bin/noip2 ]; then
		#Check and Update DietPi .installed (makes sure NOIPDYNDNS value is 2 if installed from dietpi-config)
		sed -i '/NOIPDYNDNS/c\NOIPDYNDNS 2' /boot/dietpi/.installed
		noip_installed=1
		noip_status="Offline - Please Enter No-Ip Details"
		noip_menutext="Enter/Setup NoIp Details"
		if [ "$(ps aux | grep -ci -m1 '/usr/local/bin/[n]oip2')" = 1 ]; then
			noip_status="Online / Active"
			noip_menutext="Change NoIp Details"
		fi
	fi
	

    WHIP_TITLE='--- DietPi - Network Options ---'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu " \n Ethernet : $eth0_hardware_text | $eth0_disabled_text | $eth0_connected_text \n Wifi     : $wlan0_hardware_text | $wlan0_disabled_text | $wlan0_connected_text \n Internet : $Internet_connected_text \n Samba    : $sambaclient_status \n NoIp     : $noip_status" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 20 80 5 \
    "Ethernet" "Change Wired Network Settings" \
    "Wifi" "Change Wireless Network Settings" \
    "Test" "Run the Internet Connection Test" \
    "Samba" "$sambaclient_menutext" \
    "NoIp" "$noip_menutext" 3>&1 1>&2 2>&3)

	case "$OPTION" in
	  Ethernet)
	    #No hardware found
	    if [ "$ETH_HARDWARE" = false ]; then
		    WHIP_TITLE=' Error: No Ethernet Hardware was found.'
		    WHIP_QUESTION=' No Ethernet Hardware was found. Your most likely running a Pi Model A'
			whiptail --title "$WHIP_TITLE" --msgbox "$WHIP_QUESTION" --backtitle "$WHIP_BACKTITLE" 12 60
		    #Return to this Menu
	    	TARGETMENUID=8	
   	    #Disabled
        elif [ "$ETH_DISABLED" = 1 ]; then
			whiptail --title "Ethernet is Disabled" --yesno " Ethernet must be enabled before settings can be changed. \n \n Would you like to Enable Ethernet now? \n - (NOTICE) All connections will drop! \n - (NOTICE) This will disable Wifi" --defaultno --yes-button "Enable" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
			CHOICE=$?
			#Confirm action
			if [ "$CHOICE" = 0 ]; then
				sed -i "/auto eth0/c\auto eth0" /etc/network/interfaces
				sed -i "/auto wlan0/c\#auto wlan0" /etc/network/interfaces
				Network_ApplyChanges
    	    	TARGETMENUID=9
			else
				#Return to this Menu
				TARGETMENUID=8	
            fi
		else
	    	TARGETMENUID=9
		fi
		;;
	  Wifi)
	    #No hardware found
	    if [ "$WIFI_HARDWARE" = false ]; then
		    WHIP_TITLE=' Error: No Wifi Hardware was found. '
		    WHIP_QUESTION=' No Wifi Hardware was found. '
			whiptail --title "$WHIP_TITLE" --msgbox "$WHIP_QUESTION" --backtitle "$WHIP_BACKTITLE" 12 60

		    #Return to this Menu
	    	TARGETMENUID=8		    
  	    #Disabled
        elif [ "$WIFI_DISABLED" = 1 ]; then
			whiptail --title "Wifi is Disabled" --yesno " Wifi must be enabled before settings can be changed. \n \n Would you like to Enable Wifi now? \n - (NOTICE) All connections will drop! \n - (NOTICE) This will disable Ethernet" --defaultno --yes-button "Enable" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
			CHOICE=$?
			#Confirm action
			if [ "$CHOICE" = 0 ]; then
				sed -i "/auto wlan0/c\auto wlan0" /etc/network/interfaces
				sed -i "/auto eth0/c\#auto eth0" /etc/network/interfaces
				Network_ApplyChanges
    	    	TARGETMENUID=10
			else
				#Return to this Menu
				TARGETMENUID=8	
            fi
		else
	    	TARGETMENUID=10
		fi
		;;
	  Test)
	    #Request URL to test
		OPTION=$(whiptail --inputbox "Press Enter to test your internet connection, or, enter another URL address to test (eg: http://google.com)" 8 60 "$INTERNET_URL" --title "URL Address to Test" 3>&1 1>&2 2>&3)
		CHOICE=$?
		if [ "$CHOICE" = 0 ]; then
		    INTERNET_URL=$OPTION
			Network_CheckInternetConnection
		fi
		#Return to this Menu
		TARGETMENUID=8
		;;
	  Samba*)
	    #Installed?
		if [ "$sambaclient_installed" = 0 ]; then
			whiptail --title "Samba Client Not Installed" --yesno " Samba Client is not installed, would you like to install it now? \n \n - This is required to access Windows Share Files" --defaultno --yes-button "Install" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
			CHOICE=$?
			#Confirm action
			if [ "$CHOICE" = 0 ]; then
			    #install smbclient
				apt-get update
				apt-get install smbclient cifs-utils ntfs-3g -y --no-install-recommends
			fi
		else
			Menu_SambaClientSetup
		fi

		#Return to this Menu
		TARGETMENUID=8
		;;
	  NoIp)
	    #Installed?
		if [ "$noip_installed" = 0 ]; then
			whiptail --title "NoIp Client Not Installed" --yesno " NoIp Client is not installed, would you like to install it now?" --defaultno --yes-button "Install" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
			CHOICE=$?
			#Confirm action
			if [ "$CHOICE" = 0 ]; then
			    #install noip
				wget https://dl.dropboxusercontent.com/u/33437507/dietpi_wget/noip2.gz
				wget https://dl.dropboxusercontent.com/u/33437507/dietpi_wget/noip2.sh
				
				#Check if Files couldnt be found/downloaded
				if [ "$(ls | grep -ci -m1 'noip2.gz')" = 0 ] || [ "$(ls | grep -ci -m1 'noip2.sh')" = 0 ]; then
					WHIP_TITLE='Error - Unable to Connect'
					whiptail --title "$WHIP_TITLE" --msgbox "Unable to Install NoIp. https://dl.dropboxusercontent.com/u/33437507/dietpi_wget/noip2.gz is offline and/or unreachable" 10 60
				else
					#NoIp Binary install
					gzip -d noip2.gz
					mv noip2 /usr/local/bin/noip2
					chmod +x /usr/local/bin/noip2

					#noip2 service file
					mv noip2.sh /etc/init.d/noip2
					chmod +x /etc/init.d/noip2
					update-rc.d noip2 defaults 94 6
				fi
			fi
		else
			clear
			service noip2 stop
			noip2 -C
			read -p "Press any key to continue....."
			service noip2 start
		fi

		#Return to this Menu
		TARGETMENUID=8
		;;
	  *)
		;;
	esac
}

#TARGETMENUID=9
Menu_NetworkOptions_Ethernet(){

    TARGETMENUID=8
	
	#Check Network
	Network_GetData

	#Get current Mode details
	local mode_current='DHCP'
	if [ "$ETH_MODE" = 0 ]; then
	    mode_current='STATIC'
	fi
	
	#Target Details
	local mode_target=''
	if [ "$ETH_MODE_TARGET" = 0 ]; then
	    mode_target='STATIC'
	elif [ "$ETH_MODE_TARGET" = 1 ]; then
	    mode_target='DHCP'
	fi
	
    WHIP_TITLE='--- DietPi - Ethernet Network Options ---'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Current Details: \n - Mode    = $mode_current \n - Ip      = $ETH_IP \n - Gateway = $ETH_GATEWAY \n - Mask    = $ETH_MASK" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 18 60 6 \
    "Change Mode" "$mode_target" \
    "Copy" "Copy Current address to Static" \
    "Static_Ip" "$SHARED_IP_STATIC"  \
    "Static_Gateway" "$SHARED_GATEWAY_STATIC"  \
    "Static_Mask" "$SHARED_MASK_STATIC"  \
    "Apply" "Save Changes (Restart Networking)" 3>&1 1>&2 2>&3)
	
	CHOICE=$?
	if [ "$CHOICE" = 0 ]; then
		case "$OPTION" in
		  Change*)
			((ETH_MODE_TARGET++))
			if [ "$ETH_MODE_TARGET" = 2 ]; then
				ETH_MODE_TARGET=0
			fi
			#Return to this menu
			TARGETMENUID=9
			;;
		  Apply)
			Ethernet_Reconnect			
			#Return to this menu
			TARGETMENUID=9
			;;
		  Copy)
			Network_ETH_CopyCurrentToStatic
			#Return to this menu
			TARGETMENUID=9
			;;
		  Static_Ip)
			Change_StaticIp
			#Return to this menu
			TARGETMENUID=9
			;;
		  Static_Gateway)
			Change_StaticGateway
			#Return to this menu
			TARGETMENUID=9
			;;
		  Static_Mask)
			Change_StaticMask
			#Return to this menu
			TARGETMENUID=9
			;;
		esac
	#Cancel
	else
		#Copy Current to Static (just incase user changed value, and didnt apply)
		Network_ETH_CopyCurrentToStatic
	fi
}

#TARGETMENUID=10
Menu_NetworkOptions_Wifi(){

    TARGETMENUID=8
	
	#Check Network
	Network_GetData

	#Get current Mode details
	local mode_current='DHCP'
	if [ "$WIFI_MODE" = 0 ]; then
	    mode_current='STATIC'
	fi

	#Target Details
	local mode_target=''
	if [ "$WIFI_MODE_TARGET" = 0 ]; then
	    mode_target='STATIC'
	elif [ "$WIFI_MODE_TARGET" = 1 ]; then
	    mode_target='DHCP'
	fi

    WHIP_TITLE='--- DietPi - Wireless Network Options ---'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Current Details: \n - SSID    = $WIFI_SSID | $WIFI_BITRATE Mbit | Strength: $WIFI_SIGNALSTRENGTH%\n - KEY     = $WIFI_KEY \n - Mode    = $mode_current \n - Ip      = $WIFI_IP \n - Gateway = $WIFI_GATEWAY \n - Mask    = $WIFI_MASK" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 20 60 5 \
    "Scan" "Scan and Connect" \
    "Manual" "Manually Set Wireless Details" \
    "Apply" "Save Changes (Restart Networking)" \
    "Change Mode" "$mode_target" \
    "Copy" "Copy Current address to Static" \
    "Static_Ip" "$SHARED_IP_STATIC"  \
    "Static_Gateway" "$SHARED_GATEWAY_STATIC"  \
    "Static_Mask" "$SHARED_MASK_STATIC" 3>&1 1>&2 2>&3)
	
	CHOICE=$?
	if [ "$CHOICE" = 0 ]; then
		case "$OPTION" in
		  Scan)
		    Scan_Wifi
			Wifi_Reconnect
			#Return to this menu
			TARGETMENUID=10
			;;
		  Manual)
		    Change_WifiSsid
		    Change_WifiKey
			Wifi_Reconnect
			#Return to this menu
			TARGETMENUID=10
			;;
		  Change*)
			((WIFI_MODE_TARGET++))
			if [ "$WIFI_MODE_TARGET" = 2 ]; then
				WIFI_MODE_TARGET=0
			fi
			#Return to this menu
			TARGETMENUID=10
			;;
		  Apply)
			Wifi_Reconnect
			#Return to this menu
			TARGETMENUID=10
			;;
		  Copy)
			Network_WIFI_CopyCurrentToStatic
			#Return to this menu
			TARGETMENUID=10
			;;
		  Static_Ip)
			Change_StaticIp
			#Return to this menu
			TARGETMENUID=10
			;;
		  Static_Gateway)
			Change_StaticGateway
			#Return to this menu
			TARGETMENUID=10
			;;
		  Static_Mask)
			Change_StaticMask
			#Return to this menu
			TARGETMENUID=10
			;;
		esac
	else
		#Copy Current to Static (just incase user changed value, and didnt apply)
		Network_WIFI_CopyCurrentToStatic
	fi
}

#TARGETMENUID=11
Menu_Tools(){

    TARGETMENUID=0
	
    WHIP_TITLE='--- DietPi - Tools ---'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Make a Selection" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 13 60 2 \
    "1" "SDcard / USB Drive Benchmarks" 3>&1 1>&2 2>&3)
 
 CHOICE=$?
    if [ "$CHOICE" = 0 ]; then
        if [ "$OPTION" = 1 ]; then
			TARGETMENUID=12
		fi
	fi
}

#Benchmark Scores
SD_WRITE='Not Tested'
SD_READ='Not Tested'
USB_WRITE='Not Tested'
USB_READ='Not Tested'
MAX_BENCHMARK_COUNT=100

#TARGETMENUID=12
Menu_FilesystemBenchmark(){

    TARGETMENUID=11
	
	local filepath_benchmark=""
	
    WHIP_TITLE='--- DietPi - SD / HDD Benchmark ---'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu " SDcard: Write = $SD_WRITE | Read = $SD_READ \n USBHDD: Write = $USB_WRITE | Read = $USB_READ" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 13 60 2 \
    "SDcard" "Start SDcard Benchmark" \
    "USBHDD" "Start USB Harddrive Benchmark" 3>&1 1>&2 2>&3)

	case "$OPTION" in
	  SDcard)
		OPTION=$(whiptail --inputbox " Please Enter a filesize test value (MB). A value of 100 is recommended" 8 60 "$MAX_BENCHMARK_COUNT" --title "Benchmark File Size (MB)" 3>&1 1>&2 2>&3)
		CHOICE=$?
		if [ "$CHOICE" = 0 ]; then
		    MAX_BENCHMARK_COUNT=$OPTION
			filepath_benchmark="/root/benchmark.file"
			
			clear
			echo -e "Please wait, performing SDcard Benchmark...."
			echo -e "Testing Seq Write Speed ($MAX_BENCHMARK_COUNT MB)"
			SD_WRITE=$(dd bs=1M count=$MAX_BENCHMARK_COUNT if=/dev/zero of=$filepath_benchmark conv=fdatasync 2>&1 | awk '/copied/ {print $8 " "  $9}')

			#Clear Cache
			sh -c "sync && echo 3 > /proc/sys/vm/drop_caches"
			
			echo -e "Testing Seq Read Speed ($MAX_BENCHMARK_COUNT MB)"
			SD_READ=$(dd bs=1M count=$MAX_BENCHMARK_COUNT if=$filepath_benchmark of=/dev/zero conv=fdatasync 2>&1 | awk '/copied/ {print $8 " "  $9}')
			
			#echo -e "Testing Random Write Speed ($MAX_BENCHMARK_COUNT MB)"
			#SD_WRITE_RND=$(dd bs=1M count=$MAX_BENCHMARK_COUNT if=/dev/urandom of=$filepath_benchmark conv=fdatasync 2>&1 | awk '/copied/ {print $8 " "  $9}')
			
			#Delete Test File
			rm $filepath_benchmark
		fi
		
		#Return to this menu
		TARGETMENUID=12
		;;
	  USBHDD)
	    #Check USB is connected and mounted
		local usb_hdd_connected=$(df -h | grep -ci -m1 '/dev/sda1')		
		if [ "$usb_hdd_connected" = 1 ]; then			
			OPTION=$(whiptail --inputbox " Please Enter a filesize test value (MB). A value of 100 is recommended" 8 60 "$MAX_BENCHMARK_COUNT" --title "Benchmark File Size (MB)" 3>&1 1>&2 2>&3)
			CHOICE=$?
			if [ "$CHOICE" = 0 ]; then
    		    MAX_BENCHMARK_COUNT=$OPTION
	    		filepath_benchmark="/mnt/usb_1/benchmark.file"
				
				clear
				echo -e "Please wait, performing USB Harddrive Benchmark...."
				echo -e "Testing Seq Write Speed ($MAX_BENCHMARK_COUNT MB)"
				USB_WRITE=$(dd bs=1M count=$MAX_BENCHMARK_COUNT if=/dev/zero of=$filepath_benchmark conv=fdatasync 2>&1 | awk '/copied/ {print $8 " "  $9}')
				
				#Clear Cache
				sh -c "sync && echo 3 > /proc/sys/vm/drop_caches"
				
				echo -e "Testing Seq Read Speed ($MAX_BENCHMARK_COUNT MB)"
				USB_READ=$(dd bs=1M count=$MAX_BENCHMARK_COUNT if=$filepath_benchmark of=/dev/zero conv=fdatasync 2>&1 | awk '/copied/ {print $8 " "  $9}')
				
				#Delete Test File
				rm $filepath_benchmark
			fi
		#No Drive
		else
			whiptail --title "No USB Drive was found" --msgbox " No USB Drive was found, and/or, /dev/sda1 isnt mounted to /mnt/usb_1. \n The test has been aborted " --backtitle "$WHIP_BACKTITLE" 10 60
		fi
		
		#Return to this menu
		TARGETMENUID=12
		;;
	  *)
		;;
	esac
}

Reset_Overclocking(){
	sed -i '/over_voltage=/c\#over_voltage=0' /boot/config.txt
	if [ "$HW_MODEL" = 2 ]; then
        sed -i '/arm_freq=/c\#arm_freq=900' /boot/config.txt #Although not applied, we can use this for current values
	else
        sed -i '/arm_freq=/c\#arm_freq=700' /boot/config.txt #Although not applied, we can use this for current values
	fi
	sed -i '/core_freq=/c\#core_freq=250' /boot/config.txt
	sed -i '/sdram_freq=/c\#sdram_freq=400' /boot/config.txt
	REBOOT_REQUIRED=true
}
	
Warning_Overclocking(){
    WHIP_TITLE='Warning!'
    WHIP_QUESTION=' This may void the warranty on your Pi. \n - Use at your own risk! \n - The default temp_limit for DietPi is 65c, if the unit is above that temp, the Pi SHOULD underclock'
}

#TARGETMENUID=13
Menu_Overclock(){

    TARGETMENUID=4
	
	#Get Current Overclocking Settings	
    local temp_limit_value=$(grep temp_limit= /boot/config.txt | tr -d '#temp_limit=')
    local over_voltage_value=$(grep over_voltage= /boot/config.txt | tr -d '#over_voltage=')
    local arm_freq_value=$(grep arm_freq= /boot/config.txt | tr -d '#arm_freq=')
    local core_freq_value=$(grep core_freq= /boot/config.txt | tr -d '#core_freq=')
    local sdram_freq_value=$(grep sdram_freq= /boot/config.txt | tr -d '#sdram_freq=')	
	
	WHIP_TITLE="---------- DietPi - Overclocking ----------"
	#Overclocking Pi1
    if [ "$HW_MODEL" = 0 ] || [ "$HW_MODEL" = 1 ]; then
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Hardware : $HW_MODEL_DESCRIPTION \n Current: $arm_freq_value MHz ARM | $core_freq_value MHz core | $sdram_freq_value MHz SDRAM | $over_voltage_value overvolt" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 14 70 4 \
		"none" "700 MHz ARM | 250 MHz core | 400 MHz SDRAM | 0 overvolt" \
		"safe" "900 MHz ARM | 250 MHz core | 400 MHz SDRAM | 2 overvolt" \
		"high" "1000 MHz ARM | 375 MHz core | 400 MHz SDRAM | 5 overvolt" \
		"extreme" "1000 MHz ARM | 500 MHz core | 500 MHz SDRAM | 6 overvolt" 3>&1 1>&2 2>&3)

		case "$OPTION" in
		  none)
			Reset_Overclocking
			sed -i '/over_voltage=/c\#over_voltage=0' /boot/config.txt
			sed -i '/arm_freq=/c\#arm_freq=700' /boot/config.txt
			#Return to this menu
			TARGETMENUID=13
			;;
		  safe)
			Reset_Overclocking
			sed -i '/over_voltage=/c\over_voltage=2' /boot/config.txt
			sed -i '/arm_freq=/c\arm_freq=900' /boot/config.txt
			#Return to this menu
			TARGETMENUID=13
			;;
		  high)
		    Warning_Overclocking
			whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --yes-button "DO IT ANYWAY!" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
			CHOICE=$?
			if [ "$CHOICE" = 0 ]; then
    			Reset_Overclocking
    			sed -i '/over_voltage=/c\over_voltage=5' /boot/config.txt
    			sed -i '/arm_freq=/c\arm_freq=1000' /boot/config.txt
	    		sed -i '/core_freq=/c\core_freq=375' /boot/config.txt
			fi
			#Return to this menu
			TARGETMENUID=13
			;;
		  extreme)
		    Warning_Overclocking
			whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --yes-button "DO IT ANYWAY!" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
			CHOICE=$?
			if [ "$CHOICE" = 0 ]; then
    			Reset_Overclocking
    			sed -i '/over_voltage=/c\over_voltage=6' /boot/config.txt
    			sed -i '/arm_freq=/c\arm_freq=1000' /boot/config.txt
	    		sed -i '/core_freq=/c\core_freq=400' /boot/config.txt
	    		sed -i '/sdram_freq=/c\sdram_freq=500' /boot/config.txt
			fi
			#Return to this menu
			TARGETMENUID=13
			;;
		  *)
			;;
		esac
	#Overclocking Pi2
	elif (( $HW_MODEL == 2 )); then
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu " Hardware : $HW_MODEL_DESCRIPTION \n Current: $arm_freq_value MHz ARM | $core_freq_value MHz core | $sdram_freq_value MHz SDRAM | $over_voltage_value overvolt" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 14 75 4 \
		"none" "900 MHz  ARM | 250 MHz core | 400 MHz SDRAM | 0 overvolt" \
		"low" "1000 MHz ARM | 250 MHz core | 400 MHz SDRAM | 2 overvolt" \
		"med" "1000 MHz ARM | 500 MHz core | 400 MHz SDRAM | 4 overvolt" \
		"extreme" "1100 MHz ARM | 500 MHz core | 450 MHz SDRAM | 6 overvolt" 3>&1 1>&2 2>&3)

		case "$OPTION" in
		  none)
			Reset_Overclocking		  
			sed -i '/over_voltage=/c\#over_voltage=0' /boot/config.txt
			sed -i '/arm_freq=/c\#arm_freq=900' /boot/config.txt
			#Return to this menu
			TARGETMENUID=13
			;;
		  low)
		    Warning_Overclocking
			whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --yes-button "DO IT ANYWAY!" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
			CHOICE=$?
			if [ "$CHOICE" = 0 ]; then
			    Reset_Overclocking
			    sed -i '/over_voltage=/c\over_voltage=2' /boot/config.txt
			    sed -i '/arm_freq=/c\arm_freq=1000' /boot/config.txt
			fi
			#Return to this menu
			TARGETMENUID=13
			;;
		  med)
		    Warning_Overclocking
			whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --yes-button "DO IT ANYWAY!" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
			CHOICE=$?
			if [ "$CHOICE" = 0 ]; then
    			Reset_Overclocking
    			sed -i '/over_voltage=/c\over_voltage=4' /boot/config.txt
			    sed -i '/arm_freq=/c\arm_freq=1000' /boot/config.txt
	    		sed -i '/core_freq=/c\core_freq=500' /boot/config.txt
	    		sed -i '/sdram_freq=/c\sdram_freq=400' /boot/config.txt
			fi
			#Return to this menu
			TARGETMENUID=13
			;;
		  extreme)
		    Warning_Overclocking
			whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --defaultno --yes-button "DO IT ANYWAY!" --no-button "Abort" --backtitle "$WHIP_BACKTITLE" 14 60
			CHOICE=$?
			if [ "$CHOICE" = 0 ]; then
    			Reset_Overclocking
    			sed -i '/over_voltage=/c\over_voltage=6' /boot/config.txt
    			sed -i '/arm_freq=/c\arm_freq=1100' /boot/config.txt
	    		sed -i '/core_freq=/c\core_freq=500' /boot/config.txt
	    		sed -i '/sdram_freq=/c\sdram_freq=450' /boot/config.txt
			fi
			#Return to this menu
			TARGETMENUID=13
			;;
		  *)
			;;
		esac
	fi
}

#/////////////////////////////////////////////////////////////////////////////////////
# Main Loop
#/////////////////////////////////////////////////////////////////////////////////////
if (( $DIETPI_INSTALL_STAGE >= 0 )); then

    #Start DietPi-Config
    runmenu=true
    while "$runmenu"; do
	
	    #Clear Screen buffer
		clear
		
     	#Exit
        if [ "$TARGETMENUID" = -1 ]; then
    		runmenu=false		
		#Run Menus
        elif [ "$TARGETMENUID" = 0 ]; then
            Menu_Main
		elif [ "$TARGETMENUID" = 1 ]; then
		    Menu_DisplayOptions
		elif [ "$TARGETMENUID" = 2 ]; then
		    Menu_DisplayOptions_Resolution
		elif [ "$TARGETMENUID" = 3 ]; then
		    Menu_AdvancedOptions
		elif [ "$TARGETMENUID" = 4 ]; then
		    Menu_PerformanceOptions
		elif [ "$TARGETMENUID" = 5 ]; then
		    Menu_SecurityOptions
		elif [ "$TARGETMENUID" = 6 ]; then
		    Menu_GpumemoryOptions
		elif [ "$TARGETMENUID" = 7 ]; then
		    Menu_LanguageOptions
		elif [ "$TARGETMENUID" = 8 ]; then
		    Menu_NetworkOptions
		elif [ "$TARGETMENUID" = 9 ]; then
		    Menu_NetworkOptions_Ethernet
		elif [ "$TARGETMENUID" = 10 ]; then
		    Menu_NetworkOptions_Wifi
		elif [ "$TARGETMENUID" = 11 ]; then
		    Menu_Tools
		elif [ "$TARGETMENUID" = 12 ]; then
		    Menu_FilesystemBenchmark
		elif [ "$TARGETMENUID" = 13 ]; then
		    Menu_Overclock
        fi
    done
else
    echo -e " >> Filesystem prep has not yet completed: \n Please wait for the system to reboot "
fi